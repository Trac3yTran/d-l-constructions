import React, { useState } from 'react';
import { useHistory } from 'react-router-dom';
import {
  UserLabel,
  UserParagraph,
  UserInput,
  UserButton,
  UserPanel,
} from './Styled';
import { signUp } from '../../axios/authServices';
import { useGlobalState } from '../../utils/stateContext';


// new user registration page only accessable by the Owner

// similar logic to './NewTimesheet.js'

export default function NewUser() {
  const initialFormState = {
    username: '',
    email: '',
    password: '',
    password_confirmation: '',
  };

  const [formState, setFormState] = useState(initialFormState);
  const { dispatch } = useGlobalState();

  let history = useHistory();

  function handleChange(e) {
    setFormState({
      ...formState,
      [e.target.name]: e.target.value,
    });
  }

  function handleRegister(e) {
    e.preventDefault();
    signUp(formState)
      .then((data) => {
        sessionStorage.setItem('token', data.jwt); // assigns jwt generated by knock to 'token' 
        sessionStorage.setItem('user', data.username); // assigns the username to 'user'
        dispatch({ type: 'setLoggedInUser', data: data.username }); // calls the Reducer action to "attach" the jwt to the loggedInUser for 24 hours
        history.push('/portal'); //redirects back to the index page
      })
      .catch((err) => {
        setFormState({ errorMessage: err.message });
      });
  }
  return (
    <>
      <UserPanel className='formContainer'>
        <h3>Employee Registration Form</h3>
        <UserParagraph>
          Please complete this form to create an account.
        </UserParagraph>
        <UserLabel>Username:</UserLabel>
        <UserInput
          type='text'
          name='username'
          value={formState.username}
          onChange={handleChange}
          placeholder='Create a username'
        ></UserInput>
        <br />
        <UserLabel>Email:</UserLabel>
        <UserInput
          type='email'
          name='email'
          value={formState.email}
          onChange={handleChange}
          placeholder='Enter your email'
        ></UserInput>
        <br />
        <UserLabel>Password:</UserLabel>
        <UserInput
          type='password'
          name='password'
          value={formState.password}
          onChange={handleChange}
          placeholder='Enter password'
        ></UserInput>
        <br />
        <UserLabel>Password Confirmation:</UserLabel>
        <UserInput
          type='password'
          name='password_confirmation'
          value={formState.password_confirmation}
          onChange={handleChange}
          placeholder='Confirm your password'
        ></UserInput>
        <br />
        <UserButton onClick={handleRegister}>Register</UserButton>
          <div>
            { formState.errorMessage &&
								<p className="error" style={{color: "white"}}> { "Oops! Please check your details and try again"} </p> }
          	</div>
        <UserButton onClick={() => history.push(`/portal`)}>Back</UserButton>
      </UserPanel>
    </>
  );
}
